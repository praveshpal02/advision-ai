'use server';
/**
 * @fileOverview AI-powered visual ad generator flow using DALL-E 3.
 *
 * - generateVisualAdWrapper - A function that generates visual ad variations based on reference ad, brand guidelines, and output format.
 * Imports schemas from `src/types/flow-schemas.js`.
 */

import { ai } from '@/ai/ai-instance';
import OpenAI from 'openai';
import { generatePrompt } from '@/ai/flows/generate-visual-prompt.jsx';
// Import schemas from the dedicated non-'use server' file
import { GenerateVisualAdInputSchema, GenerateVisualAdOutputSchema, GeneratePromptInputSchema } from '@/types/flow-schemas.js';


// Helper function to get DALL-E compatible size string
const getDalleSize = (width, height) => {
    // Find the closest supported DALL-E 3 size.
    // This is a simple heuristic, might need refinement.
    const aspectRatio = width / height;
    if (width >= 1792 && height >= 1024 && aspectRatio > 1.3) return "1792x1024"; // Wider
    if (width >= 1024 && height >= 1792 && aspectRatio < 0.7) return "1024x1792"; // Taller
    // Default or if dimensions don't match wide/tall ratios well
    return "1024x1024";
};


// Main generation logic
async function generateVisualAdInternal(input) {
    console.log("Starting generateVisualAd flow...");

    const openai = new OpenAI({
        apiKey: input.openaiApiKey,
    });

    // --- Generate the DALL-E Prompt ---
    console.log("Generating DALL-E prompt using analysis and copy data...");
    let dallePromptText = "";
    try {
        const promptInput = {
             brandColors: input.brandColors,
             brandStyleWords: input.brandStyleWords,
             targetAudience: input.targetAudience,
             outputFormat: input.outputFormat,
             promptTweaks: input.promptTweaks,
             analyzedData: input.analyzedData, // Pass analyzed data
             copyElements: input.copyElements, // Pass generated copy
        };
        // Validate promptInput against GeneratePromptInputSchema if necessary (runtime check)
        // GeneratePromptInputSchema.parse(promptInput); // Example runtime validation
        const promptResult = await generatePrompt(promptInput); // Call the prompt generator flow
        dallePromptText = promptResult.dallePrompt;
        console.log("Generated DALL-E Prompt:", dallePromptText);
    } catch (error) {
        console.error("Error generating DALL-E prompt:", error);
        throw new Error(`Failed to generate DALL-E prompt: ${error instanceof Error ? error.message : String(error)}`);
    }

    // --- Generate Images with DALL-E ---
    const dalleSize = getDalleSize(input.width, input.height);
    const generatedImages = [];

    // DALL-E 3 currently generates one image per API call.
    // We need to make multiple calls if numberOfVariations > 1.
    const numVariationsToGenerate = Math.min(input.numberOfVariations, 10); // Ensure max 10

    console.log(`Generating ${numVariationsToGenerate} visual variations using DALL-E 3 (${dalleSize})...`);

    for (let i = 0; i < numVariationsToGenerate; i++) {
        console.log(`Generating variation ${i + 1}...`);
        let currentPrompt = dallePromptText;
        // Add slight variation to prompt for subsequent calls if desired and generating more than one
        if (numVariationsToGenerate > 1) {
            currentPrompt += ` (Style variation ${i + 1})`; // Add variation seed
        }

        try {
            const response = await openai.images.generate({
                model: "dall-e-3",
                prompt: currentPrompt, // Use the potentially modified prompt
                n: 1, // Generate one image at a time
                size: dalleSize,
                response_format: "b64_json", // Get base64 encoded image data
                quality: "hd", // Request higher quality
                style: 'vivid', // Optional: lean towards more vivid images
            });

            const b64Json = response.data[0]?.b64_json;
            if (b64Json) {
                // Prepend the necessary data URI prefix
                generatedImages.push(`data:image/png;base64,${b64Json}`);
                console.log(`Variation ${i + 1} generated successfully.`);
            } else {
                console.warn(`DALL-E response for variation ${i + 1} did not contain b64_json.`);
            }
        } catch (error) {
            console.error(`Error generating image variation ${i + 1} with DALL-E:`, error);
             if (error.response) {
                console.error('DALL-E API Error Status:', error.response.status);
                console.error('DALL-E API Error Data:', error.response.data);
              } else {
                console.error('DALL-E API Error:', error.message || error);
              }
            throw new Error(`Failed to generate image variation ${i + 1}: ${error.message || 'Unknown DALL-E error'}`);
        }
    }


    if (generatedImages.length === 0) {
        throw new Error("No images were successfully generated by DALL-E.");
    }

    console.log(`Successfully generated ${generatedImages.length} visual variations.`);
    return { generatedAdVariations: generatedImages };
}

// Define the flow using the main function directly
const generateVisualAdFlow = ai.defineFlow(
  {
    name: 'generateVisualAdFlow',
    inputSchema: GenerateVisualAdInputSchema,
    outputSchema: GenerateVisualAdOutputSchema,
  },
  generateVisualAdInternal // Pass the internal async function
);

// Only export the async wrapper function
export async function generateVisualAdWrapper(input) {
  return generateVisualAdFlow(input);
}
